import asyncio
import random
from typing import Dict, Any
from src.domain.services import AIService
from src.domain.entities import JobType


class FakeAIService(AIService):
    """Fake AI service for testing and development"""
    
    async def generate(self, job_type: JobType, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """Simulate AI generation with fake processing time"""
        
        # Simulate processing time
        await asyncio.sleep(random.uniform(2, 5))
        
        if job_type == JobType.AUDIO_GENERATION:
            return await self._generate_audio(input_data)
        elif job_type == JobType.TEXT_GENERATION:
            return await self._generate_text(input_data)
        elif job_type == JobType.IMAGE_GENERATION:
            return await self._generate_image(input_data)
        else:
            raise ValueError(f"Unsupported job type: {job_type}")
    
    async def _generate_audio(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """Fake audio generation"""
        text = input_data.get("text", "Hello world")
        voice = input_data.get("voice", "default")
        
        # Simulate audio file generation
        fake_audio_url = f"https://fake-storage.com/audio/{random.randint(1000, 9999)}.mp3"
        
        return {
            "output_data": {
                "text": text,
                "voice": voice,
                "duration": random.uniform(5, 30),
                "format": "mp3",
                "sample_rate": 44100
            },
            "artifact_url": fake_audio_url
        }
    
    async def _generate_text(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """Fake text generation"""
        prompt = input_data.get("prompt", "Generate some text")
        max_tokens = input_data.get("max_tokens", 100)
        
        # Generate fake text response
        fake_responses = [
            "This is a fake AI-generated text response for testing purposes.",
            "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
            "The quick brown fox jumps over the lazy dog.",
            "Artificial intelligence is transforming the world as we know it.",
            "This response was generated by a mock AI service for development."
        ]
        
        generated_text = random.choice(fake_responses)
        
        return {
            "output_data": {
                "prompt": prompt,
                "generated_text": generated_text,
                "tokens_used": random.randint(50, max_tokens),
                "model": "fake-gpt-3.5"
            }
        }
    
    async def _generate_image(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """Fake image generation"""
        prompt = input_data.get("prompt", "Generate an image")
        size = input_data.get("size", "512x512")
        
        # Simulate image file generation
        fake_image_url = f"https://fake-storage.com/images/{random.randint(1000, 9999)}.png"
        
        return {
            "output_data": {
                "prompt": prompt,
                "size": size,
                "format": "png",
                "model": "fake-dall-e"
            },
            "artifact_url": fake_image_url
        }
